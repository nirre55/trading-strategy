"""
Module d'ex√©cution des trades avec gestion des ordres
"""
import os
import time
import threading
from datetime import datetime
from binance.client import Client
from binance.exceptions import BinanceAPIException
import config
from position_manager import PositionManager, load_api_credentials_from_env
from retry_manager import RetryManager
from trading_logger import trading_logger

# 1. Import du nouveau module (ajouter en haut du fichier)
try:
    from delayed_sltp_manager import DelayedSLTPManager
    DELAYED_SLTP_AVAILABLE = True
    print("‚úÖ DelayedSLTPManager disponible")
except ImportError as e:
    print(f"‚ö†Ô∏è DelayedSLTPManager non disponible: {e}")
    DELAYED_SLTP_AVAILABLE = False

class TradeExecutor:
    def __init__(self):
        """Initialise l'ex√©cuteur de trades"""
        try:
            # Chargement des cl√©s API
            api_key = load_api_credentials_from_env("BINANCE_API_KEY")
            api_secret = load_api_credentials_from_env("BINANCE_API_SECRET")
            
            # Client Binance Futures
            self.client = Client(api_key, api_secret)
            self.client.API_URL = 'https://fapi.binance.com'
            
            # Position Manager pour calculs et formatage
            self.position_manager = PositionManager()
            
            # Suivi des ordres actifs
            self.active_trades = {}  # Structure: {trade_id: {entry, sl, tp, side, quantity}}
            self.trade_counter = 0
            
            # Thread pour monitoring des ordres
            self.monitoring_active = False
            self.monitoring_thread = None
            
            # NOUVEAU: Gestionnaire SL/TP retard√©
            self.delayed_sltp_manager = None
            if DELAYED_SLTP_AVAILABLE and config.DELAYED_SLTP_CONFIG.get('ENABLED', False):
                try:
                    self.delayed_sltp_manager = DelayedSLTPManager(self, None)
                    print("‚úÖ Gestion SL/TP retard√©e activ√©e")
                    trading_logger.info("Gestion SL/TP retard√©e activ√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur initialisation SL/TP retard√©: {e}")
                    self.delayed_sltp_manager = None
            else:
                print("üìä Gestion SL/TP imm√©diate (mode classique)")
            
            print("‚úÖ TradeExecutor initialis√© avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur initialisation TradeExecutor: {e}")
            trading_logger.error_occurred("INIT_TRADE_EXECUTOR", str(e))
            raise
    
    def get_current_price(self):
        """R√©cup√®re le prix market actuel du symbole"""
        try:
            # Retry configur√© pour r√©cup√©ration de prix
            @RetryManager.with_configured_retry('PRICE')
            def _get_ticker():
                return self.client.futures_symbol_ticker(symbol=config.ASSET_CONFIG['SYMBOL'])

            ticker = _get_ticker()
            price = float(ticker['price'])
            print(f"üí∞ Prix actuel {config.ASSET_CONFIG['SYMBOL']}: {price}")
            return price
            
        except BinanceAPIException as e:
            print(f"‚ùå Erreur API r√©cup√©ration prix: {e}")
            trading_logger.error_occurred("GET_PRICE_API", str(e))
            return None
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration prix: {e}")
            trading_logger.error_occurred("GET_PRICE", str(e))
            return None
    
    def calculate_limit_entry_price(self, side, current_price, spread_percent):
        """
        Calcule le prix d'entr√©e pour ordre LIMIT
        
        Args:
            side: 'BUY' ou 'SELL'
            current_price: Prix actuel du march√©
            spread_percent: Pourcentage de spread √† appliquer
            
        Returns:
            Prix format√© pour ordre limit
        """
        try:
            current_price = float(current_price)
            spread_percent = float(spread_percent)
            
            if side == 'BUY':  # LONG
                # Acheter l√©g√®rement en dessous du prix actuel
                limit_price = current_price - (current_price * spread_percent / 100)
                print(f"üìà LIMIT BUY: {current_price} - {spread_percent}% = {limit_price}")
            else:  # SELL / SHORT
                # Vendre l√©g√®rement au dessus du prix actuel
                limit_price = current_price + (current_price * spread_percent / 100)
                print(f"üìâ LIMIT SELL: {current_price} + {spread_percent}% = {limit_price}")
            
            return self.position_manager.format_price(limit_price)
            
        except Exception as e:
            print(f"‚ùå Erreur calcul prix limit: {e}")
            trading_logger.error_occurred("CALCUL_LIMIT_PRICE", str(e))
            return None
    
    def place_entry_order(self, side, quantity, order_type="MARKET", limit_price=None):
        """
        Place l'ordre d'entr√©e (MARKET ou LIMIT)
        
        Args:
            side: 'BUY' ou 'SELL'
            quantity: Quantit√© format√©e
            order_type: 'MARKET' ou 'LIMIT'
            limit_price: Prix limit (requis si LIMIT)
            
        Returns:
            dict: {order_id, executed_price, executed_quantity, status}
        """
        try:
            print(f"üöÄ Placement ordre {order_type} {side}: {quantity}")
            
            if order_type == 'MARKET':
                order = self.client.futures_create_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    side=side,
                    type='MARKET',
                    quantity=quantity
                )
                
                # Pour ordre MARKET, r√©cup√©rer imm√©diatement les d√©tails
                time.sleep(0.5)  # Petit d√©lai pour s'assurer que l'ordre est trait√©
                executed_price, executed_quantity = self._get_executed_order_details(order['orderId'])
                
                return {
                    'order_id': order['orderId'],
                    'executed_price': executed_price,
                    'executed_quantity': executed_quantity,
                    'status': 'FILLED'
                }
                
            elif order_type == 'LIMIT':
                if not limit_price:
                    raise ValueError("Prix limit requis pour ordre LIMIT")
                
                order = self.client.futures_create_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    side=side,
                    type='LIMIT',
                    timeInForce='GTC',  # Good Till Cancelled
                    quantity=quantity,
                    price=str(limit_price)
                )
                
                return {
                    'order_id': order['orderId'],
                    'executed_price': None,  # Sera rempli apr√®s ex√©cution
                    'executed_quantity': None,
                    'status': 'PENDING'
                }
            
            else:
                raise ValueError(f"Type d'ordre non support√©: {order_type}")
                
        except BinanceAPIException as e:
            print(f"‚ùå Erreur API placement ordre: {e}")
            trading_logger.error_occurred("PLACE_ENTRY_ORDER_API", str(e))
            return None
        except Exception as e:
            print(f"‚ùå Erreur placement ordre: {e}")
            trading_logger.error_occurred("PLACE_ENTRY_ORDER", str(e))
            return None
    
    def wait_for_order_execution(self, order_id, timeout=30):
        """
        Attend l'ex√©cution d'un ordre et r√©cup√®re les d√©tails
        
        Args:
            order_id: ID de l'ordre √† surveiller
            timeout: Timeout en secondes
            
        Returns:
            dict: {executed_price, executed_quantity, status}
        """
        try:
            print(f"‚è≥ Attente ex√©cution ordre {order_id} (timeout: {timeout}s)")
            
            start_time = time.time()
            
            while time.time() - start_time < timeout:
                # Retry l√©ger sur status order
                @RetryManager.with_configured_retry('ORDER_STATUS')
                def _get_order():
                    return self.client.futures_get_order(
                        symbol=config.ASSET_CONFIG['SYMBOL'],
                        orderId=order_id
                    )
                order_status = _get_order()
                
                if order_status['status'] == 'FILLED':
                    executed_price = float(order_status['avgPrice'])
                    executed_quantity = float(order_status['executedQty'])
                    
                    print(f"‚úÖ Ordre {order_id} ex√©cut√©:")
                    print(f"   Prix: {executed_price}")
                    print(f"   Quantit√©: {executed_quantity}")
                    
                    return {
                        'executed_price': executed_price,
                        'executed_quantity': executed_quantity,
                        'status': 'FILLED'
                    }
                
                elif order_status['status'] in ['CANCELED', 'REJECTED', 'EXPIRED']:
                    print(f"‚ùå Ordre {order_id} √©chou√©: {order_status['status']}")
                    return {
                        'executed_price': None,
                        'executed_quantity': None,
                        'status': order_status['status']
                    }
                
                time.sleep(1)  # V√©rifier chaque seconde
            
            # Timeout atteint
            print(f"‚è∞ Timeout atteint pour ordre {order_id}")
            
            # Annuler l'ordre en cas de timeout
            try:
                @RetryManager.with_configured_retry('ORDER_CANCELLATION')
                def _cancel():
                    return self.client.futures_cancel_order(
                        symbol=config.ASSET_CONFIG['SYMBOL'],
                        orderId=order_id
                    )
                _cancel()
                print(f"üö´ Ordre {order_id} annul√© (timeout)")
            except:
                pass  # Ignore si d√©j√† ex√©cut√©
            
            return {
                'executed_price': None,
                'executed_quantity': None,
                'status': 'TIMEOUT'
            }
            
        except BinanceAPIException as e:
            print(f"‚ùå Erreur API attente ex√©cution: {e}")
            trading_logger.error_occurred("WAIT_ORDER_EXEC_API", str(e))
            return None
        except Exception as e:
            print(f"‚ùå Erreur attente ex√©cution: {e}")
            trading_logger.error_occurred("WAIT_ORDER_EXEC", str(e))
            return None
    
    def execute_market_fallback(self, side, quantity, original_order_type):
        """
        Ex√©cute un ordre MARKET en fallback apr√®s √©chec d'un ordre LIMIT
        
        Args:
            side: 'BUY' ou 'SELL'
            quantity: Quantit√© √† trader
            original_order_type: Type d'ordre original pour les logs
            
        Returns:
            dict: R√©sultat de l'ordre MARKET ou None si √©chec
        """
        try:
            print(f"‚ö° FALLBACK MARKET: Ex√©cution ordre {side} {quantity} apr√®s √©chec {original_order_type}")
            
            # V√©rifier si fallback activ√© dans config
            if not config.TRADING_CONFIG.get('MARKET_FALLBACK_ENABLED', True):
                print("üö´ Fallback MARKET d√©sactiv√© dans configuration")
                return None
            
            # R√©cup√©rer prix actuel pour validation
            current_price = self.get_current_price()
            if not current_price:
                print("‚ùå Impossible de r√©cup√©rer prix actuel pour fallback")
                return None
            
            print(f"üìä Prix actuel pour fallback: {current_price}")
            
            # Placer ordre MARKET
            @RetryManager.with_configured_retry('ORDER_PLACEMENT')
            def _place_market():
                return self.client.futures_create_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    side=side,
                    type='MARKET',
                    quantity=quantity
                )
            order = _place_market()
            
            order_id = order['orderId']
            print(f"‚ö° Ordre MARKET fallback plac√©: {order_id}")
            
            # Attendre ex√©cution (MARKET g√©n√©ralement instantan√©)
            time.sleep(0.5)
            executed_price, executed_quantity = self._get_executed_order_details(order_id)
            
            if executed_price and executed_quantity:
                # Calculer slippage par rapport au prix attendu
                slippage = None
                if original_order_type == 'LIMIT':
                    slippage = abs(executed_price - current_price) / current_price * 100
                    print(f"üìä Slippage fallback: {slippage:.3f}%")
                
                # Respecter le seuil de slippage si d√©fini
                max_slippage = config.TRADING_CONFIG.get('FALLBACK_MAX_SLIPPAGE')
                if slippage is not None and max_slippage is not None and slippage > float(max_slippage):
                    print(f"üö´ Slippage {slippage:.3f}% > seuil {max_slippage:.3f}% - annulation du fallback")
                    try:
                        # Fermer imm√©diatement la position ouverte par erreur
                        self._emergency_close_position('BUY' if side == 'SELL' else 'SELL', executed_quantity)
                    except Exception:
                        pass
                    return None
                
                print(f"‚úÖ Fallback MARKET ex√©cut√© avec succ√®s:")
                print(f"   Prix d'ex√©cution: {executed_price}")
                print(f"   Quantit√©: {executed_quantity}")
                
                return {
                    'order_id': order_id,
                    'executed_price': executed_price,
                    'executed_quantity': executed_quantity,
                    'status': 'FILLED',
                    'is_fallback': True,
                    'original_type': original_order_type
                }
            else:
                print("‚ùå √âchec r√©cup√©ration d√©tails ordre MARKET fallback")
                return None
                
        except BinanceAPIException as e:
            print(f"‚ùå Erreur API fallback MARKET: {e}")
            trading_logger.error_occurred("FALLBACK_MARKET_API", str(e))
            return None
        except Exception as e:
            print(f"‚ùå Erreur fallback MARKET: {e}")
            trading_logger.error_occurred("FALLBACK_MARKET", str(e))
            return None
    
    def _get_executed_order_details(self, order_id):
        """R√©cup√®re les d√©tails d'un ordre ex√©cut√©"""
        try:
            @RetryManager.with_configured_retry('ORDER_STATUS')
            def _get_order_details():
                return self.client.futures_get_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    orderId=order_id
                )
            order_details = _get_order_details()
            
            executed_price = float(order_details['avgPrice'])
            executed_quantity = float(order_details['executedQty'])
            
            return executed_price, executed_quantity
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur r√©cup√©ration d√©tails ordre: {e}")
            trading_logger.error_occurred("GET_ORDER_DETAILS", str(e))
            return None, None
    
    def place_stop_loss_order(self, side, quantity, stop_price, trade_id):
        """
        Place un ordre Stop Loss (STOP_MARKET)
        
        Args:
            side: 'BUY' ou 'SELL' (oppos√© √† la position)
            quantity: Quantit√© √† fermer
            stop_price: Prix de d√©clenchement du stop
            trade_id: ID du trade pour suivi
            
        Returns:
            Order ID ou None
        """
        try:
            print(f"üõ°Ô∏è Placement Stop Loss: {side} {quantity} @ {stop_price}")
            
            @RetryManager.with_configured_retry('ORDER_PLACEMENT')
            def _place_sl():
                return self.client.futures_create_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    side=side,
                    type='STOP_MARKET',
                    quantity=quantity,
                    stopPrice=str(stop_price)
                )
            order = _place_sl()
            
            order_id = order['orderId']
            print(f"‚úÖ Stop Loss plac√©: {order_id}")
            
            # Enregistrer dans les trades actifs
            if trade_id in self.active_trades:
                self.active_trades[trade_id]['stop_loss_order_id'] = order_id
            
            return order_id
            
        except BinanceAPIException as e:
            print(f"‚ùå Erreur API placement Stop Loss: {e}")
            trading_logger.error_occurred("PLACE_SL_API", str(e))
            return None
        except Exception as e:
            print(f"‚ùå Erreur placement Stop Loss: {e}")
            trading_logger.error_occurred("PLACE_SL", str(e))
            return None
    
    def place_take_profit_order(self, side, quantity, limit_price, trade_id):
        """
        Place un ordre Take Profit (LIMIT)
        
        Args:
            side: 'BUY' ou 'SELL' (oppos√© √† la position)
            quantity: Quantit√© √† fermer
            limit_price: Prix limite de profit
            trade_id: ID du trade pour suivi
            
        Returns:
            Order ID ou None
        """
        try:
            print(f"üéØ Placement Take Profit: {side} {quantity} @ {limit_price}")
            
            @RetryManager.with_configured_retry('ORDER_PLACEMENT')
            def _place_tp():
                return self.client.futures_create_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    side=side,
                    type='LIMIT',
                    timeInForce='GTC',
                    quantity=quantity,
                    price=str(limit_price)
                )
            order = _place_tp()
            
            order_id = order['orderId']
            print(f"‚úÖ Take Profit plac√©: {order_id}")
            
            # Enregistrer dans les trades actifs
            if trade_id in self.active_trades:
                self.active_trades[trade_id]['take_profit_order_id'] = order_id
            
            return order_id
            
        except BinanceAPIException as e:
            print(f"‚ùå Erreur API placement Take Profit: {e}")
            trading_logger.error_occurred("PLACE_TP_API", str(e))
            return None
        except Exception as e:
            print(f"‚ùå Erreur placement Take Profit: {e}")
            trading_logger.error_occurred("PLACE_TP", str(e))
            return None
    
    def cancel_order(self, order_id):
        """Annule un ordre sp√©cifique"""
        try:
            @RetryManager.with_configured_retry('ORDER_CANCELLATION')
            def _cancel_any():
                return self.client.futures_cancel_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    orderId=order_id
                )
            _cancel_any()
            print(f"üö´ Ordre {order_id} annul√©")
            return True
            
        except BinanceAPIException as e:
            print(f"‚ùå Erreur API annulation ordre {order_id}: {e}")
            trading_logger.error_occurred("CANCEL_ORDER_API", str(e))
            return False
        except Exception as e:
            print(f"‚ùå Erreur annulation ordre {order_id}: {e}")
            trading_logger.error_occurred("CANCEL_ORDER", str(e))
            return False
    
    def execute_complete_trade_with_delayed_sltp(self, side, candles_data, current_candle_time, signal_data=None):
        """
        Ex√©cute un trade complet avec gestion retard√©e des SL/TP
        
        Args:
            side: 'LONG' ou 'SHORT'
            candles_data: Donn√©es des bougies pour calcul SL
            current_candle_time: Timestamp de la bougie actuelle d'entr√©e
            signal_data: Donn√©es du signal (optionnel)
            
        Returns:
            dict: R√©sultat du trade ou None si √©chec
        """
        try:
            print(f"\nüöÄ === EXECUTION TRADE {side} AVEC SL/TP RETARD√â ===")
            
            # 1. Validation conditions
            validation = self.position_manager.validate_trade_conditions()
            if not validation['status']:
                print(f"‚ùå Validation √©chou√©e: {validation['message']}")
                trading_logger.trade_conditions_check(validation)
                return None
            
            # 2. R√©cup√©ration donn√©es de base
            balance = self.position_manager.get_account_balance(config.ASSET_CONFIG['BALANCE_ASSET'])
            current_price = self.get_current_price()
            
            if not current_price:
                print("‚ùå Impossible de r√©cup√©rer le prix actuel")
                trading_logger.trade_failed("PRIX_ACTUEL_INDISPONIBLE", signal_data)
                return None
            
            # 3. Calcul Stop Loss bas√© sur les bougies
            sl_side = 'SHORT' if side == 'LONG' else 'LONG'
            sl_price = self.position_manager.calculate_stop_loss_price(
                candles_data, 
                side,
                config.TRADING_CONFIG['STOP_LOSS_LOOKBACK_CANDLES'],
                config.TRADING_CONFIG['STOP_LOSS_OFFSET_PERCENT']
            )
            
            if not sl_price:
                print("‚ùå Impossible de calculer le Stop Loss")
                trading_logger.trade_failed("CALCUL_SL_IMPOSSIBLE", signal_data)
                return None
            
            # 4. Calcul taille de position
            quantity = self.position_manager.calculate_position_size(
                balance,
                config.TRADING_CONFIG['RISK_PERCENT'],
                current_price,
                sl_price
            )
            
            if quantity <= 0:
                print("‚ùå Taille de position invalide")
                trading_logger.trade_failed("TAILLE_POSITION_INVALIDE", signal_data)
                return None
            
            # 5. Pr√©paration ordre d'entr√©e
            order_type = config.TRADING_CONFIG['ENTRY_ORDER_TYPE']
            entry_side = 'BUY' if side == 'LONG' else 'SELL'
            
            limit_price = None
            if order_type == 'LIMIT':
                limit_price = self.calculate_limit_entry_price(
                    entry_side,
                    current_price,
                    config.TRADING_CONFIG['LIMIT_SPREAD_PERCENT']
                )
            
            # 6. Placement ordre d'entr√©e
            entry_result = self.place_entry_order(entry_side, quantity, order_type, limit_price)
            
            if not entry_result:
                print("‚ùå √âchec placement ordre d'entr√©e")
                trading_logger.trade_failed("ECHEC_ORDER_ENTREE", signal_data)
                return None
            
            # 7. Attendre ex√©cution si ordre LIMIT
            if order_type == 'LIMIT' and entry_result['status'] == 'PENDING':
                execution_result = self.wait_for_order_execution(
                    entry_result['order_id'],
                    config.TRADING_CONFIG['ORDER_EXECUTION_TIMEOUT']
                )
                
                if execution_result and execution_result['status'] == 'FILLED':
                    # Ordre LIMIT ex√©cut√© avec succ√®s
                    entry_result['executed_price'] = execution_result['executed_price']
                    entry_result['executed_quantity'] = execution_result['executed_quantity']
                    entry_result['status'] = 'FILLED'
                    
                elif execution_result and execution_result['status'] == 'TIMEOUT':
                    # TIMEOUT - Tenter fallback MARKET si activ√©
                    print(f"‚è∞ Ordre LIMIT timeout - Tentative fallback MARKET")
                    trading_logger.timeout_order(entry_result['order_id'], 'LIMIT', config.TRADING_CONFIG['ORDER_EXECUTION_TIMEOUT'])
                    
                    fallback_result = self.execute_market_fallback(
                        entry_side, 
                        quantity, 
                        'LIMIT'
                    )
                    
                    if fallback_result and fallback_result['status'] == 'FILLED':
                        # Fallback MARKET r√©ussi
                        entry_result = fallback_result
                        print(f"‚úÖ Fallback MARKET r√©ussi - Trade continue")
                        trading_logger.fallback_executed('MARKET', 'LIMIT')
                    else:
                        # Fallback √©chou√© aussi
                        print("‚ùå Fallback MARKET √©chou√© - Trade abandonn√©")
                        trading_logger.fallback_failed('MARKET', 'LIMIT', 'EXECUTION_ECHOUEE')
                        return None
                else:
                    # Autre erreur d'ex√©cution
                    print("‚ùå Ordre d'entr√©e non ex√©cut√© - Trade abandonn√©")
                    trading_logger.trade_failed("ENTREE_NON_EXECUTEE", signal_data)
                    return None
            
            executed_price = entry_result['executed_price']
            executed_quantity = entry_result['executed_quantity']
            
            print(f"‚úÖ Entr√©e ex√©cut√©e: {executed_quantity} @ {executed_price}")
            
            # 8. Calcul Take Profit bas√© sur prix d'ex√©cution r√©el
            tp_price = self.position_manager.calculate_take_profit_price(
                executed_price,
                side,
                config.TRADING_CONFIG['TAKE_PROFIT_PERCENT']
            )
            
            if not tp_price:
                print("‚ùå Impossible de calculer le Take Profit")
                self._emergency_close_position(entry_side, executed_quantity)
                trading_logger.trade_failed("CALCUL_TP_IMPOSSIBLE", signal_data)
                return None
            
            # 9. Cr√©er un ID unique pour ce trade
            self.trade_counter += 1
            trade_id = f"trade_{self.trade_counter}_{int(time.time())}"
            
            # 10. NOUVEAU: Enregistrer le trade SANS placer SL/TP imm√©diatement
            self.active_trades[trade_id] = {
                'side': side,
                'entry_side': entry_side,
                'entry_order_id': entry_result['order_id'],
                'entry_price': executed_price,
                'quantity': executed_quantity,
                'stop_loss_price': sl_price,  # Prix calcul√© original
                'take_profit_price': tp_price,  # Prix calcul√© original
                'stop_loss_order_id': None,  # Sera rempli apr√®s placement retard√©
                'take_profit_order_id': None,  # Sera rempli apr√®s placement retard√©
                'timestamp': datetime.now().isoformat(),
                'signal_data': signal_data,
                'delayed_sltp': True  # Marqueur pour gestion retard√©e
            }
            
            # 11. NOUVEAU: Enregistrer pour gestion retard√©e des SL/TP
            if self.delayed_sltp_manager:
                delayed_success = self.delayed_sltp_manager.register_trade_for_delayed_sltp(
                    trade_result={
                        'trade_id': trade_id,
                        'side': side,
                        'entry_price': executed_price,
                        'quantity': executed_quantity
                    },
                    entry_candle_time=current_candle_time,
                    original_sl_price=sl_price,
                    original_tp_price=tp_price
                )
                
                if delayed_success:
                    print(f"üìÖ Trade {trade_id} enregistr√© pour SL/TP retard√©")
                    print(f"   ‚è∞ SL/TP seront plac√©s apr√®s fermeture de la bougie d'entr√©e")
                    trading_logger.info(f"Trade {trade_id} en attente de SL/TP retard√©")
                else:
                    print(f"‚ö†Ô∏è Erreur enregistrement SL/TP retard√© - Placement imm√©diat en fallback")
                    # Fallback: placement imm√©diat si erreur
                    self._place_immediate_sltp_fallback(trade_id, side, executed_quantity, sl_price, tp_price)
            else:
                # Pas de gestion retard√©e disponible - placement imm√©diat
                print(f"üìä Gestion retard√©e non disponible - Placement SL/TP imm√©diat")
                self._place_immediate_sltp_fallback(trade_id, side, executed_quantity, sl_price, tp_price)
            
            # 12. D√©marrer monitoring si pas d√©j√† actif
            if not self.monitoring_active:
                self.start_order_monitoring()
            
            # 13. R√©sultat final
            trade_result = {
                'trade_id': trade_id,
                'status': 'ACTIVE',
                'side': side,
                'entry_price': executed_price,
                'quantity': executed_quantity,
                'stop_loss_price': sl_price,  # Prix original calcul√©
                'take_profit_price': tp_price,  # Prix original calcul√©
                'risk_amount': abs(executed_price - sl_price) * executed_quantity,
                'potential_profit': abs(tp_price - executed_price) * executed_quantity,
                'delayed_sltp': self.delayed_sltp_manager is not None
            }
            
            print(f"‚úÖ Trade {trade_id} cr√©√© avec succ√®s!")
            print(f"   Entr√©e: {executed_price}")
            print(f"   SL calcul√©: {sl_price}")
            print(f"   TP calcul√©: {tp_price}")
            print(f"   Risque: {trade_result['risk_amount']:.2f}")
            print(f"   Profit potentiel: {trade_result['potential_profit']:.2f}")
            
            if self.delayed_sltp_manager:
                print(f"   üïê Mode: SL/TP retard√© apr√®s fermeture bougie")
            else:
                print(f"   ‚ö° Mode: SL/TP imm√©diat")
            
            return trade_result
            
        except Exception as e:
            error_msg = f"Erreur ex√©cution trade retard√©: {str(e)}"
            print(f"‚ùå {error_msg}")
            trading_logger.trade_failed(error_msg, signal_data)
            return None

    # 4. NOUVELLE FONCTION _place_immediate_sltp_fallback
    def _place_immediate_sltp_fallback(self, trade_id, side, quantity, sl_price, tp_price):
        """
        Placement imm√©diat des SL/TP en cas de fallback
        (M√©thode de secours si gestion retard√©e non disponible)
        """
        try:
            print(f"‚ö° Placement SL/TP imm√©diat pour {trade_id} (fallback)")
            
            # C√¥t√©s des ordres (oppos√©s √† l'entr√©e)
            sl_order_side = 'SELL' if side == 'LONG' else 'BUY'
            tp_order_side = 'SELL' if side == 'LONG' else 'BUY'
            
            # Placement Stop Loss
            sl_order_id = self.place_stop_loss_order(
                sl_order_side,
                quantity,
                sl_price,
                trade_id
            )
            
            # Placement Take Profit  
            tp_order_id = self.place_take_profit_order(
                tp_order_side,
                quantity,
                tp_price,
                trade_id
            )
            
            if sl_order_id and tp_order_id:
                print(f"‚úÖ SL/TP imm√©diat plac√© avec succ√®s")
                # Marquer comme non-retard√©
                if trade_id in self.active_trades:
                    self.active_trades[trade_id]['delayed_sltp'] = False
            else:
                print(f"‚ö†Ô∏è √âchec placement SL/TP imm√©diat - Position sans protection!")
                trading_logger.warning(f"SL_TP_IMMEDIATE_FAILED pour {trade_id}")
                
        except Exception as e:
            error_msg = f"Erreur placement SL/TP imm√©diat: {str(e)}"
            print(f"‚ùå {error_msg}")
            trading_logger.error_occurred("IMMEDIATE_SLTP_FALLBACK", error_msg)

    def execute_complete_trade(self, side, candles_data, signal_data=None):
        """
        Ex√©cute un trade complet: entr√©e + SL + TP
        
        Args:
            side: 'LONG' ou 'SHORT'
            candles_data: Donn√©es des bougies pour calcul SL
            signal_data: Donn√©es du signal (optionnel)
            
        Returns:
            dict: R√©sultat du trade ou None si √©chec
        """
        try:
            print(f"\nüöÄ === EXECUTION TRADE {side} ===")
            
            # 1. Validation conditions
            validation = self.position_manager.validate_trade_conditions()
            if not validation['status']:
                print(f"‚ùå Validation √©chou√©e: {validation['message']}")
                trading_logger.trade_conditions_check(validation)
                return None
            
            # 2. R√©cup√©ration donn√©es de base
            balance = self.position_manager.get_account_balance(config.ASSET_CONFIG['BALANCE_ASSET'])
            current_price = self.get_current_price()
            
            if not current_price:
                print("‚ùå Impossible de r√©cup√©rer le prix actuel")
                trading_logger.trade_failed("PRIX_ACTUEL_INDISPONIBLE", signal_data)
                return None
            
            # 3. Calcul Stop Loss bas√© sur les bougies
            sl_side = 'SHORT' if side == 'LONG' else 'LONG'  # C√¥t√© oppos√© pour SL
            sl_price = self.position_manager.calculate_stop_loss_price(
                candles_data, 
                side,
                config.TRADING_CONFIG['STOP_LOSS_LOOKBACK_CANDLES'],
                config.TRADING_CONFIG['STOP_LOSS_OFFSET_PERCENT']
            )
            
            if not sl_price:
                print("‚ùå Impossible de calculer le Stop Loss")
                trading_logger.trade_failed("CALCUL_SL_IMPOSSIBLE", signal_data)
                return None
            
            # 4. Calcul taille de position
            quantity = self.position_manager.calculate_position_size(
                balance,
                config.TRADING_CONFIG['RISK_PERCENT'],
                current_price,
                sl_price
            )
            
            if quantity <= 0:
                print("‚ùå Taille de position invalide")
                trading_logger.trade_failed("TAILLE_POSITION_INVALIDE", signal_data)
                return None
            
            # 5. Pr√©paration ordre d'entr√©e
            order_type = config.TRADING_CONFIG['ENTRY_ORDER_TYPE']
            entry_side = 'BUY' if side == 'LONG' else 'SELL'
            
            limit_price = None
            if order_type == 'LIMIT':
                limit_price = self.calculate_limit_entry_price(
                    entry_side,
                    current_price,
                    config.TRADING_CONFIG['LIMIT_SPREAD_PERCENT']
                )
            
            # 6. Placement ordre d'entr√©e
            entry_result = self.place_entry_order(entry_side, quantity, order_type, limit_price)
            
            if not entry_result:
                print("‚ùå √âchec placement ordre d'entr√©e")
                trading_logger.trade_failed("ECHEC_ORDER_ENTREE", signal_data)
                return None
            
            # 7. Attendre ex√©cution si ordre LIMIT
            if order_type == 'LIMIT' and entry_result['status'] == 'PENDING':
                execution_result = self.wait_for_order_execution(
                    entry_result['order_id'],
                    config.TRADING_CONFIG['ORDER_EXECUTION_TIMEOUT']
                )
                
                if execution_result and execution_result['status'] == 'FILLED':
                    # Ordre LIMIT ex√©cut√© avec succ√®s
                    entry_result['executed_price'] = execution_result['executed_price']
                    entry_result['executed_quantity'] = execution_result['executed_quantity']
                    entry_result['status'] = 'FILLED'
                    
                elif execution_result and execution_result['status'] == 'TIMEOUT':
                    # TIMEOUT - Tenter fallback MARKET si activ√©
                    print(f"‚è∞ Ordre LIMIT timeout - Tentative fallback MARKET")
                    trading_logger.timeout_order(entry_result['order_id'], 'LIMIT', config.TRADING_CONFIG['ORDER_EXECUTION_TIMEOUT'])
                    
                    fallback_result = self.execute_market_fallback(
                        entry_side, 
                        quantity, 
                        'LIMIT'
                    )
                    
                    if fallback_result and fallback_result['status'] == 'FILLED':
                        # Fallback MARKET r√©ussi
                        entry_result = fallback_result
                        print(f"‚úÖ Fallback MARKET r√©ussi - Trade continue")
                        trading_logger.fallback_executed('MARKET', 'LIMIT')
                    else:
                        # Fallback √©chou√© aussi
                        print("‚ùå Fallback MARKET √©chou√© - Trade abandonn√©")
                        trading_logger.fallback_failed('MARKET', 'LIMIT', 'EXECUTION_ECHOUEE')
                        return None
                else:
                    # Autre erreur d'ex√©cution
                    print("‚ùå Ordre d'entr√©e non ex√©cut√© - Trade abandonn√©")
                    trading_logger.trade_failed("ENTREE_NON_EXECUTEE", signal_data)
                    return None
            
            executed_price = entry_result['executed_price']
            executed_quantity = entry_result['executed_quantity']
            
            print(f"‚úÖ Entr√©e ex√©cut√©e: {executed_quantity} @ {executed_price}")
            
            # 8. Calcul Take Profit bas√© sur prix d'ex√©cution r√©el
            tp_price = self.position_manager.calculate_take_profit_price(
                executed_price,
                side,
                config.TRADING_CONFIG['TAKE_PROFIT_PERCENT']
            )
            
            if not tp_price:
                print("‚ùå Impossible de calculer le Take Profit")
                # Fermer la position imm√©diatement
                self._emergency_close_position(entry_side, executed_quantity)
                trading_logger.trade_failed("CALCUL_TP_IMPOSSIBLE", signal_data)
                return None
            
            # 9. Cr√©er un ID unique pour ce trade
            self.trade_counter += 1
            trade_id = f"trade_{self.trade_counter}_{int(time.time())}"
            
            # 10. Enregistrer le trade
            self.active_trades[trade_id] = {
                'side': side,
                'entry_side': entry_side,
                'entry_order_id': entry_result['order_id'],
                'entry_price': executed_price,
                'quantity': executed_quantity,
                'stop_loss_price': sl_price,
                'take_profit_price': tp_price,
                'stop_loss_order_id': None,
                'take_profit_order_id': None,
                'timestamp': datetime.now().isoformat(),
                'signal_data': signal_data
            }
            
            # 11. Placement Stop Loss
            sl_order_side = 'SELL' if side == 'LONG' else 'BUY'  # Oppos√© √† l'entr√©e
            sl_order_id = self.place_stop_loss_order(
                sl_order_side,
                executed_quantity,
                sl_price,
                trade_id
            )
            
            # 12. Placement Take Profit
            tp_order_side = 'SELL' if side == 'LONG' else 'BUY'  # Oppos√© √† l'entr√©e
            tp_order_id = self.place_take_profit_order(
                tp_order_side,
                executed_quantity,
                tp_price,
                trade_id
            )
            
            if not sl_order_id or not tp_order_id:
                print("‚ö†Ô∏è √âchec placement SL/TP - Position ouverte sans protection!")
                trading_logger.warning("SL_TP_NON_PLACES - Position sans protection")
                # TODO: Implementer fermeture d'urgence
            
            # 13. D√©marrer monitoring si pas d√©j√† actif
            if not self.monitoring_active:
                self.start_order_monitoring()
            
            # 14. R√©sultat final
            trade_result = {
                'trade_id': trade_id,
                'status': 'ACTIVE',
                'side': side,
                'entry_price': executed_price,
                'quantity': executed_quantity,
                'stop_loss_price': sl_price,
                'take_profit_price': tp_price,
                'risk_amount': abs(executed_price - sl_price) * executed_quantity,
                'potential_profit': abs(tp_price - executed_price) * executed_quantity
            }
            
            print(f"‚úÖ Trade {trade_id} cr√©√© avec succ√®s!")
            print(f"   Entr√©e: {executed_price}")
            print(f"   SL: {sl_price}")
            print(f"   TP: {tp_price}")
            print(f"   Risque: {trade_result['risk_amount']:.2f}")
            print(f"   Profit potentiel: {trade_result['potential_profit']:.2f}")
            
            return trade_result
            
        except Exception as e:
            print(f"‚ùå Erreur ex√©cution trade: {e}")
            trading_logger.trade_failed(str(e), signal_data)
            return None
    
    def _emergency_close_position(self, original_side, quantity):
        """Ferme une position en urgence"""
        try:
            emergency_side = 'SELL' if original_side == 'BUY' else 'BUY'
            print(f"üö® Fermeture d'urgence: {emergency_side} {quantity}")
            
            @RetryManager.with_configured_retry('ORDER_PLACEMENT')
            def _emergency():
                return self.client.futures_create_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    side=emergency_side,
                    type='MARKET',
                    quantity=quantity
                )
            _emergency()
            print("‚úÖ Position ferm√©e en urgence")
            
        except Exception as e:
            print(f"‚ùå Erreur fermeture d'urgence: {e}")
            trading_logger.error_occurred("EMERGENCY_CLOSE", str(e))
    
    def start_order_monitoring(self):
        """D√©marre la surveillance des ordres dans un thread s√©par√©"""
        if self.monitoring_active:
            return
        
        self.monitoring_active = True
        self.monitoring_thread = threading.Thread(
            target=self.monitor_orders_and_cleanup,
            daemon=True
        )
        self.monitoring_thread.start()
        print("üëÅÔ∏è Monitoring des ordres d√©marr√©")
    
    def monitor_orders_and_cleanup(self):
        """
        Surveille les ordres SL/TP et nettoie automatiquement
        Fonction ex√©cut√©e dans un thread s√©par√©
        """
        print("üëÅÔ∏è D√©marrage monitoring des ordres...")
        
        while self.monitoring_active:
            try:
                # Copie pour √©viter modification pendant it√©ration
                trades_to_check = self.active_trades.copy()
                
                for trade_id, trade_info in trades_to_check.items():
                    sl_order_id = trade_info.get('stop_loss_order_id')
                    tp_order_id = trade_info.get('take_profit_order_id')
                    
                    # V√©rifier status des ordres
                    sl_executed = False
                    tp_executed = False
                    
                    if sl_order_id:
                        sl_status = self._check_order_status(sl_order_id)
                        if sl_status == 'FILLED':
                            sl_executed = True
                            print(f"üõ°Ô∏è Stop Loss d√©clench√© pour {trade_id}")
                    
                    if tp_order_id:
                        tp_status = self._check_order_status(tp_order_id)
                        if tp_status == 'FILLED':
                            tp_executed = True
                            print(f"üéØ Take Profit atteint pour {trade_id}")
                    
                    # Nettoyage si un ordre est ex√©cut√©
                    if sl_executed or tp_executed:
                        self._cleanup_trade(trade_id, sl_executed, tp_executed)
                
                time.sleep(5)  # V√©rifier toutes les 5 secondes
                
            except Exception as e:
                print(f"‚ùå Erreur monitoring: {e}")
                time.sleep(10)  # Attendre plus longtemps en cas d'erreur
        
        print("üëÅÔ∏è Monitoring des ordres arr√™t√©")
    
    def _check_order_status(self, order_id):
        """V√©rifie le status d'un ordre"""
        try:
            order = self.client.futures_get_order(
                symbol=config.ASSET_CONFIG['SYMBOL'],
                orderId=order_id
            )
            return order['status']
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur v√©rification ordre {order_id}: {e}")
            return None
    
    def _cleanup_trade(self, trade_id, sl_executed, tp_executed):
        """Nettoie les ordres apr√®s ex√©cution de SL ou TP"""
        try:
            if trade_id not in self.active_trades:
                return
            
            trade_info = self.active_trades[trade_id]
            
            if sl_executed and trade_info.get('take_profit_order_id'):
                # SL d√©clench√© -> annuler TP
                self.cancel_order(trade_info['take_profit_order_id'])
                print(f"üö´ Take Profit annul√© pour {trade_id}")
                
            elif tp_executed and trade_info.get('stop_loss_order_id'):
                # TP atteint -> annuler SL
                self.cancel_order(trade_info['stop_loss_order_id'])
                print(f"üö´ Stop Loss annul√© pour {trade_id}")
            
            # Marquer le trade comme termin√©
            trade_info['status'] = 'CLOSED'
            trade_info['close_reason'] = 'STOP_LOSS' if sl_executed else 'TAKE_PROFIT'
            trade_info['close_timestamp'] = datetime.now().isoformat()
            
            # Retirer des trades actifs
            del self.active_trades[trade_id]
            
            print(f"‚úÖ Trade {trade_id} ferm√©: {trade_info['close_reason']}")
            
        except Exception as e:
            print(f"‚ùå Erreur nettoyage trade {trade_id}: {e}")
    
    def get_active_trades(self):
        """Retourne la liste des trades actifs"""
        return self.active_trades.copy()
    
    def stop_monitoring(self):
        """Arr√™te le monitoring des ordres"""
        self.monitoring_active = False
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.monitoring_thread.join(timeout=5)
        
        # CORRIG√â: Arr√™ter aussi le monitoring SL/TP retard√©
        if (hasattr(self, 'delayed_sltp_manager') and 
            self.delayed_sltp_manager is not None):
            self.delayed_sltp_manager.stop_monitoring()
    
        print("üõë Monitoring arr√™t√©")
            
    # 6. NOUVELLE FONCTION get_complete_trading_status
    def get_complete_trading_status(self):
        """Retourne un statut complet incluant les trades retard√©s"""
        status = {
            'active_trades': self.get_active_trades(),
            'delayed_sltp_status': None
        }
        
        if (hasattr(self, 'delayed_sltp_manager') and 
            self.delayed_sltp_manager is not None):
            status['delayed_sltp_status'] = self.delayed_sltp_manager.get_pending_trades_status()
        
        return status

    # 7. NOUVELLE FONCTION force_process_delayed_trade
    def force_process_delayed_trade(self, trade_id):
        """Force le traitement d'un trade avec SL/TP retard√©"""
        if (not hasattr(self, 'delayed_sltp_manager') or 
            self.delayed_sltp_manager is None):
            print("‚ùå Gestionnaire SL/TP retard√© non disponible")
            return False
        
        return self.delayed_sltp_manager.force_process_trade(trade_id)
    
    def close_all_positions(self):
        """Ferme toutes les positions et annule tous les ordres"""
        try:
            print("üö® Fermeture de toutes les positions...")
            
            # Annuler tous les ordres en attente
            for trade_id, trade_info in self.active_trades.items():
                if trade_info.get('stop_loss_order_id'):
                    self.cancel_order(trade_info['stop_loss_order_id'])
                if trade_info.get('take_profit_order_id'):
                    self.cancel_order(trade_info['take_profit_order_id'])
            
            # Fermer toutes les positions ouvertes
            positions = self.position_manager.get_current_positions()
            for pos in positions:
                close_side = 'SELL' if pos['side'] == 'LONG' else 'BUY'
                self.client.futures_create_order(
                    symbol=config.ASSET_CONFIG['SYMBOL'],
                    side=close_side,
                    type='MARKET',
                    quantity=pos['size']
                )
                print(f"‚úÖ Position {pos['side']} ferm√©e: {pos['size']}")
            
            # Vider les trades actifs
            self.active_trades.clear()
            
            print("‚úÖ Toutes les positions ferm√©es")
            
        except Exception as e:
            print(f"‚ùå Erreur fermeture positions: {e}")

if __name__ == "__main__":
    # Test du module
    try:
        print("üß™ Test TradeExecutor...")
        
        te = TradeExecutor()
        
        # Test r√©cup√©ration prix
        current_price = te.get_current_price()
        
        # Test calcul prix limit
        if current_price:
            limit_buy = te.calculate_limit_entry_price('BUY', current_price, 0.01)
            limit_sell = te.calculate_limit_entry_price('SELL', current_price, 0.01)
            
            print(f"üí∞ Prix actuel: {current_price}")
            print(f"üìà Limit BUY: {limit_buy}")
            print(f"üìâ Limit SELL: {limit_sell}")
        
        # Test r√©cup√©ration trades actifs
        active_trades = te.get_active_trades()
        print(f"üìä Trades actifs: {len(active_trades)}")
        
        # Test validation positions existantes
        positions = te.position_manager.get_current_positions()
        
        print("‚úÖ Test TradeExecutor termin√© avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur test TradeExecutor: {e}")