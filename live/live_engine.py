# live_engine.py
"""
Moteur principal de trading live
Orchestre tous les composants du syst√®me
"""
import logging
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, Optional
import signal
import sys

from config_live import (
    API_CONFIG, TRADING_CONFIG, FILTERS_CONFIG, 
    MONITORING_CONFIG, SAFETY_LIMITS, ENVIRONMENT
)
from binance_client import BinanceFuturesClient
from data_manager import RealTimeDataManager
from signal_detector import LiveSignalDetector
from risk_manager import LiveRiskManager
from order_manager import LiveOrderManager
from monitoring import LiveMonitoring, PerformanceTracker

logger = logging.getLogger(__name__)

class LiveTradingEngine:
    """Moteur principal de trading live"""
    
    def __init__(self):
        self.running = False
        self.initialized = False
        
        # Composants principaux
        self.binance_client = None
        self.data_manager = None
        self.signal_detector = None
        self.risk_manager = None
        self.order_manager = None
        self.monitoring = None
        self.performance_tracker = None
        
        # √âtat du syst√®me
        self.last_signal = None
        self.system_health = {}
        self.emergency_stop = False
        
        # Threading
        self.main_thread = None
        self.health_check_thread = None
        
        # Configuration du signal handler pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def initialize(self) -> bool:
        """Initialise tous les composants du syst√®me"""
        try:
            logger.info("üöÄ Initialisation du moteur de trading live...")
            
            # 1. Client Binance
            logger.info("üì° Connexion √† Binance...")
            self.binance_client = BinanceFuturesClient(
                api_key=API_CONFIG["api_key"],
                api_secret=API_CONFIG["api_secret"],
                testnet=API_CONFIG["testnet"]
            )
            
            if not self.binance_client.connect():
                logger.error("‚ùå √âchec connexion Binance")
                return False
            
            # 2. Gestionnaire de donn√©es temps r√©el
            logger.info("üìä Initialisation donn√©es temps r√©el...")
            self.data_manager = RealTimeDataManager(
                binance_client=self.binance_client,
                symbol=TRADING_CONFIG["symbol"],
                timeframe=TRADING_CONFIG["timeframe"]
            )
            
            if not self.data_manager.initialize_data():
                logger.error("‚ùå √âchec initialisation donn√©es")
                return False
            
            # 3. D√©tecteur de signaux
            logger.info("üéØ Initialisation d√©tecteur de signaux...")
            self.signal_detector = LiveSignalDetector(
                config=TRADING_CONFIG,
                filters_config=FILTERS_CONFIG
            )
            
            # 4. Gestionnaire de risque
            logger.info("‚ö†Ô∏è Initialisation gestionnaire de risque...")
            self.risk_manager = LiveRiskManager(
                config=TRADING_CONFIG,
                safety_limits=SAFETY_LIMITS
            )
            
            # Mise √† jour du solde initial pour USDC
            balance, error = self.binance_client.get_account_balance("USDC")
            if not error:
                self.risk_manager.update_balance(balance)
                logger.info(f"üí∞ Solde USDC d√©tect√©: {balance:.2f} USDC")
            else:
                logger.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer le solde USDC: {error}")
                # Fallback vers USDT
                balance_usdt, error_usdt = self.binance_client.get_account_balance("USDT")
                if not error_usdt:
                    self.risk_manager.update_balance(balance_usdt)
                    logger.info(f"üí∞ Solde USDT d√©tect√©: {balance_usdt:.2f} USDT")
                else:
                    logger.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer le solde: {error_usdt}")
            
            # 5. Gestionnaire d'ordres
            logger.info("üìã Initialisation gestionnaire d'ordres...")
            self.order_manager = LiveOrderManager(
                binance_client=self.binance_client,
                config=TRADING_CONFIG
            )
            
            # 6. Syst√®me de surveillance
            logger.info("üîç Initialisation surveillance...")
            self.monitoring = LiveMonitoring(MONITORING_CONFIG)
            self.performance_tracker = PerformanceTracker()
            
            # 7. Configuration des callbacks
            self._setup_callbacks()
            
            self.initialized = True
            logger.info("‚úÖ Moteur initialis√© avec succ√®s")
            
            # Test des notifications
            self.monitoring.test_all_notifications()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation: {e}")
            return False
    
    def _setup_callbacks(self):
        """Configure tous les callbacks entre composants"""
        # Data Manager -> Signal Detector
        self.data_manager.add_candle_closed_callback(
            self.signal_detector.process_new_data
        )
        
        # Signal Detector -> Trade Execution
        self.signal_detector.add_signal_callback(self._on_signal_detected)
        self.signal_detector.add_rsi_detection_callback(self._on_rsi_detected)
        
        # Order Manager -> Monitoring
        self.order_manager.add_trade_opened_callback(self._on_trade_opened)
        self.order_manager.add_trade_closed_callback(self._on_trade_closed)
        
        # Health Monitoring
        self.monitoring.add_health_callback(self._get_health_data)
    
    def start(self) -> bool:
        """D√©marre le moteur de trading"""
        if not self.initialized:
            logger.error("‚ùå Moteur non initialis√©")
            return False
        
        if self.running:
            logger.warning("‚ö†Ô∏è Moteur d√©j√† en cours d'ex√©cution")
            return True
        
        try:
            logger.info("üöÄ D√©marrage du moteur de trading...")
            
            # Mode surveillance ou trading auto
            mode = "AUTO TRADING" if ENVIRONMENT["auto_trade"] else "SURVEILLANCE SEULEMENT"
            logger.info(f"üìã Mode: {mode}")
            
            self.running = True
            
            # D√©marrage des composants
            self.data_manager.start_websocket()
            self.monitoring.start_monitoring()
            
            # D√©marrage du thread principal
            self.main_thread = threading.Thread(target=self._main_loop)
            self.main_thread.daemon = True
            self.main_thread.start()
            
            # D√©marrage du health check
            self.health_check_thread = threading.Thread(target=self._health_check_loop)
            self.health_check_thread.daemon = True
            self.health_check_thread.start()
            
            # Notification de d√©marrage
            self.monitoring.send_notification(
                f"üöÄ Moteur de trading d√©marr√© en mode {mode}",
                "SUCCESS"
            )
            
            logger.info("‚úÖ Moteur de trading actif")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage: {e}")
            self.running = False
            return False
    
    def stop(self, reason: str = "Arr√™t manuel"):
        """Arr√™te le moteur de trading"""
        if not self.running:
            return
        
        logger.info(f"üõë Arr√™t du moteur: {reason}")
        
        try:
            self.running = False
            
            # Fermeture de tous les trades actifs
            if self.order_manager:
                active_count = self.order_manager.close_all_trades(reason)
                if active_count > 0:
                    logger.info(f"üîÑ {active_count} trades ferm√©s")
            
            # Arr√™t des composants
            if self.data_manager:
                self.data_manager.stop_websocket()
            
            if self.monitoring:
                self.monitoring.stop_monitoring()
            
            # Attendre les threads
            if self.main_thread and self.main_thread.is_alive():
                self.main_thread.join(timeout=10)
            
            if self.health_check_thread and self.health_check_thread.is_alive():
                self.health_check_thread.join(timeout=5)
            
            # Notification d'arr√™t
            if self.monitoring:
                self.monitoring.send_notification(
                    f"üõë Moteur arr√™t√©: {reason}",
                    "WARNING"
                )
            
            logger.info("‚úÖ Moteur arr√™t√© proprement")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t: {e}")
    
    def _main_loop(self):
        """Boucle principale du moteur"""
        logger.info("üîÑ Boucle principale d√©marr√©e")
        
        # Gestion du timeout de test
        start_time = time.time()
        max_duration = ENVIRONMENT.get("max_test_duration", 0)
        
        while self.running:
            try:
                # V√©rification timeout de test
                if max_duration > 0:
                    elapsed = time.time() - start_time
                    if elapsed > max_duration:
                        logger.info(f"‚è∞ Dur√©e de test maximale atteinte: {max_duration/3600:.1f}h")
                        self.stop("Timeout de test atteint")
                        break
                
                # V√©rification de l'√©tat d'urgence
                if self.emergency_stop:
                    logger.critical("üö® Mode d'urgence actif")
                    time.sleep(10)
                    continue
                
                # Mise √† jour du solde
                self._update_balance()
                
                # V√©rifications de s√©curit√©
                self._safety_checks()
                
                time.sleep(1)  # √âviter la surcharge CPU
                
            except Exception as e:
                logger.error(f"‚ùå Erreur boucle principale: {e}")
                time.sleep(5)
        
        logger.info("üîÑ Boucle principale arr√™t√©e")
    
    def _health_check_loop(self):
        """Boucle de v√©rification de sant√© syst√®me"""
        while self.running:
            try:
                # V√©rification des connexions
                api_status = self.binance_client.get_connection_status()
                data_status = self.data_manager.get_connection_status()
                
                # Mise √† jour de la sant√© syst√®me
                self.system_health.update({
                    'api_connected': api_status['connected'],
                    'api_latency_ms': api_status.get('latency_ms', 0),
                    'websocket_connected': data_status['websocket_connected'],
                    'data_healthy': self.data_manager.is_healthy(),
                    'last_update': data_status.get('last_update'),
                    'active_trades': len(self.order_manager.active_trades) if self.order_manager else 0
                })
                
                # V√©rification d'urgence
                if not api_status['connected']:
                    self._trigger_emergency("Perte connexion API")
                elif not data_status['websocket_connected']:
                    logger.warning("‚ö†Ô∏è WebSocket d√©connect√©")
                
                time.sleep(30)  # Check toutes les 30 secondes
                
            except Exception as e:
                logger.error(f"‚ùå Erreur health check: {e}")
                time.sleep(30)
    
    def _on_signal_detected(self, signal):
        """Callback appel√© lors de la d√©tection d'un signal"""
        try:
            logger.info(f"üéØ Signal {signal.direction} d√©tect√©")
            
            self.last_signal = signal
            
            # Notification
            self.monitoring.notify_signal_detected(signal)
            
            # Si mode auto trading, ex√©cuter le trade
            if ENVIRONMENT["auto_trade"]:
                self._execute_signal(signal)
            else:
                logger.info("üìã Mode surveillance - Signal non ex√©cut√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement signal: {e}")
    
    def _on_rsi_detected(self, direction: str, timestamp: datetime, indicators: Dict):
        """Callback appel√© lors de la d√©tection RSI"""
        logger.info(f"üìä RSI {direction} d√©tect√© - En attente de confirmation")
    
    def _execute_signal(self, signal):
        """Ex√©cute un signal de trading avec TP fixe ou ratio selon la config"""
        try:
            # üÜï V√âRIFICATION CRITIQUE: Pas de nouveau trade si un trade est d√©j√† actif
            active_trades_count = len(self.order_manager.active_trades)
            if active_trades_count > 0:
                logger.warning(f"‚ùå Signal {signal.direction} ignor√© - {active_trades_count} trade(s) d√©j√† actif(s)")
                active_trade_ids = list(self.order_manager.active_trades.keys())
                logger.info(f"   Trades actifs: {active_trade_ids}")
                return
            
            # Validation du risque
            can_trade, reason = self.risk_manager.validate_trade(signal.confidence)
            if not can_trade:
                logger.warning(f"‚ùå Trade refus√©: {reason}")
                return
            
            # üí∞ DIAGNOSTIC DU PRIX D'ENTR√âE
            current_price = signal.indicators.get('close', 0)
            logger.info(f"üí∞ Prix d'entr√©e: {current_price:.1f} USDT")
            
            # üîç CALCUL SL (inchang√©)
            if signal.direction == "LONG":
                ha_low = signal.indicators.get('HA_low', current_price * 0.99)
                stop_loss_raw = ha_low * (1 - TRADING_CONFIG.get('sl_buffer_pct', 0.001))
                stop_loss = self.binance_client.format_price(stop_loss_raw, TRADING_CONFIG["symbol"])
                logger.info(f"üõë Stop Loss LONG: {stop_loss:.1f} USDT")
            else:  # SHORT
                ha_high = signal.indicators.get('HA_high', current_price * 1.01)
                stop_loss_raw = ha_high * (1 + TRADING_CONFIG.get('sl_buffer_pct', 0.001))
                stop_loss = self.binance_client.format_price(stop_loss_raw, TRADING_CONFIG["symbol"])
                logger.info(f"üõë Stop Loss SHORT: {stop_loss:.1f} USDT")
            
            # üéØ CALCUL TP SELON LE MODE CONFIGUR√â
            tp_mode = TRADING_CONFIG.get('tp_mode', 'ratio')
            logger.info(f"üéØ Mode TP: {tp_mode}")
            
            if tp_mode == "fixed_percent":
                # üÜï MODE NOUVEAU: Pourcentage fixe du prix d'entr√©e
                tp_percent = TRADING_CONFIG.get('tp_fixed_percent', 1.0)
                
                if signal.direction == "LONG":
                    take_profit_raw = current_price * (1 + tp_percent / 100)
                else:  # SHORT
                    take_profit_raw = current_price * (1 - tp_percent / 100)
                
                take_profit = self.binance_client.format_price(take_profit_raw, TRADING_CONFIG["symbol"])
                
                logger.info(f"üéØ Take Profit {tp_percent}% fixe: {take_profit:.1f} USDT")
                
                # Calcul du ratio R/R pour information
                if signal.direction == "LONG":
                    sl_distance = current_price - stop_loss
                    tp_distance = take_profit - current_price
                else:  # SHORT
                    sl_distance = stop_loss - current_price
                    tp_distance = current_price - take_profit
                
                rr_ratio = tp_distance / sl_distance if sl_distance > 0 else 0
                logger.info(f"üìä Ratio R/R r√©sultant: {rr_ratio:.2f}")
                
            else:
                # üìä MODE ANCIEN: Ratio du risque SL (comportement original)
                tp_ratio = TRADING_CONFIG.get('tp_ratio', 1.0)
                
                if signal.direction == "LONG":
                    tp_distance = (current_price - stop_loss) * tp_ratio
                    take_profit_raw = current_price + tp_distance
                else:  # SHORT
                    tp_distance = (stop_loss - current_price) * tp_ratio
                    take_profit_raw = current_price - tp_distance
                
                take_profit = self.binance_client.format_price(take_profit_raw, TRADING_CONFIG["symbol"])
                logger.info(f"üéØ Take Profit ratio {tp_ratio}x: {take_profit:.1f} USDT")
            
            # Validation de coh√©rence TP/SL
            if signal.direction == "LONG":
                if take_profit <= current_price:
                    logger.error(f"‚ùå TP LONG invalide: {take_profit} <= {current_price}")
                    return
                if stop_loss >= current_price:
                    logger.error(f"‚ùå SL LONG invalide: {stop_loss} >= {current_price}")
                    return
            else:  # SHORT
                if take_profit >= current_price:
                    logger.error(f"‚ùå TP SHORT invalide: {take_profit} >= {current_price}")
                    return
                if stop_loss <= current_price:
                    logger.error(f"‚ùå SL SHORT invalide: {stop_loss} <= {current_price}")
                    return
            
            # Calcul de la taille de position avec les nouveaux niveaux
            position_size = self.risk_manager.calculate_position_size(
                entry_price=current_price,
                stop_loss=stop_loss,
                direction=signal.direction
            )
            
            if not position_size:
                logger.warning("‚ùå Impossible de calculer la taille de position")
                return
            
            # üìä R√âSUM√â DU TRADE
            logger.info(f"üìä === R√âSUM√â TRADE {signal.direction} ===")
            logger.info(f"üí∞ Entry: {current_price:.1f} USDT")
            logger.info(f"üõë Stop Loss: {stop_loss:.1f} USDT")
            logger.info(f"üéØ Take Profit: {take_profit:.1f} USDT")
            logger.info(f"üìè Quantit√©: {position_size.quantity}")
            logger.info(f"üí∏ Risque: {position_size.risk_amount:.2f} USDT")
            
            if tp_mode == "fixed_percent":
                tp_percent = TRADING_CONFIG.get('tp_fixed_percent', 1.0)
                logger.info(f"üéØ Mode: TP fixe {tp_percent}%")
            else:
                tp_ratio = TRADING_CONFIG.get('tp_ratio', 1.0)
                logger.info(f"üéØ Mode: TP ratio {tp_ratio}x")
            
            logger.info(f"üìä === FIN R√âSUM√â ===")
            
            # Cr√©ation du trade
            trade_id = self.order_manager.create_trade(
                symbol=TRADING_CONFIG["symbol"],
                direction=signal.direction,
                position_size=position_size
            )
            
            if trade_id:
                logger.info(f"‚úÖ Trade cr√©√©: {trade_id}")
                # Reset du signal detector apr√®s cr√©ation r√©ussie
                self.signal_detector.reset_pending_signals()
            else:
                logger.error("‚ùå √âchec cr√©ation trade")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur ex√©cution signal: {e}")
            import traceback
            logger.debug(traceback.format_exc())
    
    def _on_trade_opened(self, trade):
        """Callback appel√© quand un trade s'ouvre"""
        logger.info(f"üöÄ Trade ouvert: {trade.trade_id}")
        self.monitoring.notify_trade_opened(trade)
        self.performance_tracker.record_trade({
            'direction': trade.direction,
            'entry_price': trade.entry_price,
            'quantity': trade.quantity
        })
    
    def _on_trade_closed(self, trade):
        """Callback appel√© quand un trade se ferme"""
        logger.info(f"üèÅ Trade ferm√©: {trade.trade_id} - PnL: {trade.pnl:+.2f}")
        
        # Mise √† jour du risk manager
        self.risk_manager.record_trade(
            direction=trade.direction,
            entry_price=trade.entry_price,
            quantity=trade.quantity,
            result="win" if trade.pnl > 0 else "loss",
            pnl=trade.pnl
        )
        
        # Notification
        self.monitoring.notify_trade_closed(trade)
        
        # Tracking performance
        self.performance_tracker.record_trade({
            'direction': trade.direction,
            'entry_price': trade.entry_price,
            'exit_price': trade.exit_price,
            'quantity': trade.quantity,
            'pnl': trade.pnl,
            'result': "win" if trade.pnl > 0 else "loss"
        })
    
    def _update_balance(self):
        """Met √† jour le solde du compte"""
        try:
            # R√©cup√©ration du solde USDC pour BTCUSDC
            balance, error = self.binance_client.get_account_balance("USDC")
            if not error:
                self.risk_manager.update_balance(balance)
                self.system_health['balance'] = balance
                self.system_health['currency'] = 'USDC'
            else:
                # Fallback vers USDT si USDC √©choue
                balance_usdt, error_usdt = self.binance_client.get_account_balance("USDT")
                if not error_usdt:
                    self.risk_manager.update_balance(balance_usdt)
                    self.system_health['balance'] = balance_usdt
                    self.system_health['currency'] = 'USDT'
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour solde: {e}")
    
    def _safety_checks(self):
        """V√©rifications de s√©curit√© p√©riodiques"""
        # V√©rification des limites du risk manager
        if self.risk_manager.emergency_stop and not self.emergency_stop:
            self._trigger_emergency(self.risk_manager.stop_reason)
    
    def _trigger_emergency(self, reason: str):
        """D√©clenche l'arr√™t d'urgence"""
        if self.emergency_stop:
            return
        
        self.emergency_stop = True
        logger.critical(f"üö® ARR√äT D'URGENCE: {reason}")
        
        # Fermeture de tous les trades
        if self.order_manager:
            self.order_manager.close_all_trades(f"Emergency: {reason}")
        
        # Notification
        if self.monitoring:
            self.monitoring.notify_emergency_stop(reason)
    
    def _get_health_data(self) -> Dict:
        """Retourne les donn√©es de sant√© avec d√©tection des trades multiples"""
        active_trades_count = len(self.order_manager.active_trades) if self.order_manager else 0
        
        health_data = {
            **self.system_health,
            'engine_running': self.running,
            'emergency_stop': self.emergency_stop,
            'active_trades_count': active_trades_count,
            'last_signal': self.last_signal.timestamp if self.last_signal else None,
            **self.performance_tracker.get_daily_stats(),
            **self.performance_tracker.get_system_stats()
        }
        
        # üö® ALERTE si plusieurs trades actifs
        if active_trades_count > 1:
            logger.critical(f"üö® PROBL√àME D√âTECT√â: {active_trades_count} trades actifs simultan√©ment !")
            active_trade_ids = list(self.order_manager.active_trades.keys())
            logger.critical(f"üö® Trades actifs: {active_trade_ids}")
            
            # Notification d'urgence
            if self.monitoring:
                self.monitoring.send_notification(
                    f"üö® ALERTE: {active_trades_count} trades actifs simultan√©ment !",
                    "CRITICAL"
                )
        
        return health_data
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        logger.info(f"üìß Signal re√ßu: {signum}")
        self.stop("Signal syst√®me")
        sys.exit(0)
    
    def get_status_report(self) -> str:
        """G√©n√®re un rapport de statut complet"""
        status = "üü¢ ACTIF" if self.running else "üî¥ ARR√äT√â"
        if self.emergency_stop:
            status = "üö® URGENCE"
        
        # Stats de performance
        daily_stats = self.performance_tracker.get_daily_stats()
        system_stats = self.performance_tracker.get_system_stats()
        
        # √âtat des trades
        trades_summary = self.order_manager.get_active_trades_summary() if self.order_manager else {}
        
        currency = self.system_health.get('currency', 'USDT')
        
        report = f"""
ü§ñ TRADING BOT - {status}
‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

üí∞ FINANCIAL:
‚Ä¢ Balance: {self.system_health.get('balance', 0):.2f} {currency}
‚Ä¢ PnL Jour: {daily_stats.get('daily_pnl', 0):+.2f} {currency}
‚Ä¢ Trades Jour: {daily_stats.get('daily_trades', 0)}
‚Ä¢ Trades Actifs: {trades_summary.get('total_active', 0)}

üîß SYST√àME:
‚Ä¢ Uptime: {system_stats.get('uptime', 'N/A')}
‚Ä¢ API: {"‚úÖ" if self.system_health.get('api_connected', False) else "‚ùå"}
‚Ä¢ WebSocket: {"‚úÖ" if self.system_health.get('websocket_connected', False) else "‚ùå"}
‚Ä¢ Latence: {self.system_health.get('api_latency_ms', 0)}ms

üìä PERFORMANCE:
‚Ä¢ Winrate: {daily_stats.get('winrate', 0):.1f}%
‚Ä¢ Wins/Losses: {daily_stats.get('wins', 0)}/{daily_stats.get('losses', 0)}
‚Ä¢ Erreurs API: {system_stats.get('errors_count', 0)}
        """.strip()
        
        return report
    
    def manual_override_emergency(self, reason: str) -> bool:
        """Override manuel de l'arr√™t d'urgence"""
        if not self.emergency_stop:
            return False
        
        try:
            self.emergency_stop = False
            
            # Reset du risk manager
            if self.risk_manager:
                self.risk_manager.override_emergency_stop(reason)
            
            logger.warning(f"‚ö†Ô∏è Override d'urgence: {reason}")
            
            if self.monitoring:
                self.monitoring.send_notification(
                    f"‚ö†Ô∏è Override d'urgence manuel: {reason}",
                    "WARNING"
                )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur override: {e}")
            return False
    
    def manual_close_trade(self, trade_id: str) -> bool:
        """Fermeture manuelle d'un trade"""
        if not self.order_manager:
            return False
        
        return self.order_manager.close_trade_manually(trade_id, "Manuel")
    
    def manual_signal_reset(self):
        """Reset manuel des signaux pending"""
        if self.signal_detector:
            self.signal_detector.reset_pending_signals()
            logger.info("üîÑ Signaux pending r√©initialis√©s manuellement")

# Fonction utilitaire pour d√©marrage simplifi√©
def create_and_run_engine():
    """Cr√©e et d√©marre le moteur de trading"""
    engine = LiveTradingEngine()
    
    if not engine.initialize():
        logger.error("‚ùå √âchec d'initialisation")
        return None
    
    if not engine.start():
        logger.error("‚ùå √âchec de d√©marrage")
        return None
    
    return engine