#!/usr/bin/env python3
"""
Script de debug pour identifier pourquoi les SL/TP retard√©s ne sont pas plac√©s
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import config
from datetime import datetime

def debug_delayed_sltp_status():
    """Debug complet du syst√®me SL/TP retard√©"""
    print("üîç DIAGNOSTIC SL/TP RETARD√â")
    print("=" * 50)
    
    # 1. V√©rifier la configuration
    print("\n1Ô∏è‚É£ V√âRIFICATION CONFIGURATION:")
    print("-" * 30)
    
    try:
        delayed_config = getattr(config, 'DELAYED_SLTP_CONFIG', None)
        if delayed_config:
            print(f"‚úÖ DELAYED_SLTP_CONFIG trouv√©:")
            print(f"   ENABLED: {delayed_config.get('ENABLED', 'NON D√âFINI')}")
            print(f"   PRICE_OFFSET_PERCENT: {delayed_config.get('PRICE_OFFSET_PERCENT', 'NON D√âFINI')}")
            print(f"   CHECK_INTERVAL_SECONDS: {delayed_config.get('CHECK_INTERVAL_SECONDS', 'NON D√âFINI')}")
        else:
            print("‚ùå DELAYED_SLTP_CONFIG manquant dans config.py")
            return
        
        trading_config = getattr(config, 'TRADING_CONFIG', None)
        if trading_config:
            print(f"\n‚úÖ TRADING_CONFIG trouv√©:")
            print(f"   ENABLED: {trading_config.get('ENABLED', 'NON D√âFINI')}")
            print(f"   USE_DELAYED_SLTP: {trading_config.get('USE_DELAYED_SLTP', 'NON D√âFINI')}")
        else:
            print("‚ùå TRADING_CONFIG manquant dans config.py")
            return
            
    except Exception as e:
        print(f"‚ùå Erreur lecture config: {e}")
        return
    
    # 2. V√©rifier les imports
    print("\n2Ô∏è‚É£ V√âRIFICATION IMPORTS:")
    print("-" * 30)
    
    try:
        from delayed_sltp_manager import DelayedSLTPManager
        print("‚úÖ DelayedSLTPManager import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import DelayedSLTPManager: {e}")
        return
    
    try:
        from trade_executor import TradeExecutor
        print("‚úÖ TradeExecutor import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import TradeExecutor: {e}")
        return
    
    # 3. V√©rifier si le bot utilise le syst√®me
    print("\n3Ô∏è‚É£ V√âRIFICATION INT√âGRATION BOT:")
    print("-" * 30)
    
    try:
        from trading_bot import HeikinAshiRSIBot
        print("‚úÖ HeikinAshiRSIBot import√© avec succ√®s")
        
        # V√©rifier les m√©thodes modifi√©es
        bot_methods = dir(HeikinAshiRSIBot)
        if 'execute_automatic_trade' in bot_methods:
            print("‚úÖ execute_automatic_trade pr√©sent")
        else:
            print("‚ùå execute_automatic_trade manquant")
        
    except ImportError as e:
        print(f"‚ùå Erreur import HeikinAshiRSIBot: {e}")
        return
    
    # 4. Test cr√©ation DelayedSLTPManager
    print("\n4Ô∏è‚É£ TEST CR√âATION GESTIONNAIRE:")
    print("-" * 30)
    
    try:
        class MockExecutor:
            def __init__(self):
                self.position_manager = type('obj', (object,), {'format_price': lambda self, x: round(x, 2)})()
            def get_current_price(self): return 43200.0
            def place_stop_loss_order(self, *args): return "sl_test"
            def place_take_profit_order(self, *args): return "tp_test"
        
        mock_executor = MockExecutor()
        manager = DelayedSLTPManager(mock_executor, None)  # type: ignore
        print("‚úÖ DelayedSLTPManager cr√©√© avec succ√®s")
        
        # Test des m√©thodes principales
        status = manager.get_pending_trades_status()
        print(f"‚úÖ get_pending_trades_status() fonctionne: {status['total_pending']} trades")
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation DelayedSLTPManager: {e}")
        import traceback
        traceback.print_exc()
        return
    
    print("\n5Ô∏è‚É£ POINTS DE V√âRIFICATION POUR LE BOT:")
    print("-" * 30)
    print("Pour diagnostiquer votre probl√®me, v√©rifiez dans les logs:")
    print()
    print("üîç LOGS √Ä RECHERCHER:")
    print("1. Au d√©marrage du bot:")
    print('   ‚úÖ "üïê MODE SL/TP RETARD√â ACTIV√â"')
    print('   ‚úÖ "‚úÖ Gestion SL/TP retard√©e activ√©e"')
    print('   ‚úÖ "üü¢ Gestionnaire actif"')
    print()
    print("2. Lors d'un signal de trade:")
    print('   ‚úÖ "üïê Mode SL/TP RETARD√â activ√©"')
    print('   ‚úÖ "üìÖ Trade XXX enregistr√© pour SL/TP retard√©"')
    print('   ‚úÖ "üëÅÔ∏è Monitoring SL/TP retard√© d√©marr√©"')
    print()
    print("3. √Ä la fermeture de bougie (5 min plus tard):")
    print('   ‚úÖ "üïê TRAITEMENT TRADE RETARD√â: XXX"')
    print('   ‚úÖ "üìä Prix actuel: XXX"')
    print('   ‚úÖ "üéØ Calcul SL ajust√©:"')
    print('   ‚úÖ "üìã Placement ordres retard√©s"')
    print()
    print("‚ùå LOGS PROBL√âMATIQUES:")
    print('   ‚ùå "‚ö†Ô∏è Erreur enregistrement trade retard√©"')
    print('   ‚ùå "‚ùå Gestionnaire SL/TP retard√© non disponible"')
    print('   ‚ùå "‚ùå Impossible de r√©cup√©rer le prix actuel"')
    print('   ‚ùå "‚ùå √âchec placement ordres retard√©s"')

def check_bot_configuration():
    """V√©rification sp√©cifique de la configuration du bot"""
    print("\n6Ô∏è‚É£ COMMANDES DEBUG POUR LE BOT:")
    print("-" * 30)
    print("Si votre bot tourne, vous pouvez tester ces commandes:")
    print()
    print("üéÆ COMMANDES INTERACTIVES:")
    print("1. Dans la console Python o√π tourne le bot:")
    print("   >>> bot.handle_admin_commands('status_delayed')")
    print("   >>> bot.handle_admin_commands('list_delayed')")
    print()
    print("2. V√©rifier l'√©tat du trade_executor:")
    print("   >>> bot.trade_executor.delayed_sltp_manager")
    print("   >>> bot.trade_executor.get_complete_trading_status()")
    print()
    print("3. Forcer un traitement de test:")
    print("   >>> bot.trade_executor.force_process_delayed_trade('TRADE_ID')")

def generate_debug_config():
    """G√©n√®re une configuration de debug"""
    print("\n7Ô∏è‚É£ CONFIGURATION DEBUG RECOMMAND√âE:")
    print("-" * 30)
    print("Ajoutez ceci dans votre config.py pour plus de logs:")
    print()
    config_debug = '''
# Configuration SL/TP retard√© avec logs d√©taill√©s
DELAYED_SLTP_CONFIG = {
    'ENABLED': True,
    'PRICE_OFFSET_PERCENT': 0.01,
    'CHECK_INTERVAL_SECONDS': 5,  # Plus fr√©quent pour debug
    'LOG_DETAILED_CALCULATIONS': True,
    'LOG_CANDLE_CLOSE_EVENTS': True,  # ACTIVER pour debug
    'LOG_PRICE_COMPARISONS': True,
    'LOG_OFFSET_APPLICATIONS': True,
}

# S'assurer que le trading utilise le mode retard√©
TRADING_CONFIG = {
    # ... votre config existante ...
    'USE_DELAYED_SLTP': True,  # IMPORTANT!
    'ENABLED': True,
}

# Logs plus d√©taill√©s
LOG_SETTINGS = {
    # ... votre config existante ...
    'SHOW_WEBSOCKET_DEBUG': False,
    'SHOW_DATAFRAME_UPDATES': True,  # Voir les fermetures de bougies
    'SHOW_SIGNAL_ANALYSIS': True,
}
'''
    print(config_debug)

if __name__ == "__main__":
    debug_delayed_sltp_status()
    check_bot_configuration()
    generate_debug_config()
    
    print("\nüîß √âTAPES DE R√âSOLUTION:")
    print("=" * 30)
    print("1. V√©rifiez que tous les ‚úÖ sont pr√©sents ci-dessus")
    print("2. Red√©marrez le bot avec la config debug")
    print("3. Cherchez les logs sp√©cifiques dans la console")
    print("4. Si un trade est ouvert, utilisez les commandes debug")
    print("5. Partagez les logs exacts du probl√®me")