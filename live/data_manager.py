# data_manager.py
"""
Gestionnaire de donn√©es temps r√©el via WebSocket et API REST
"""
import logging
import json
import time
import threading
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
import websocket
from queue import Queue
from binance_client import BinanceFuturesClient

logger = logging.getLogger(__name__)

class RealTimeDataManager:
    """Gestionnaire de donn√©es temps r√©el pour le trading live"""
    
    def __init__(self, binance_client: BinanceFuturesClient, symbol: str = "BTCUSDT", timeframe: str = "5m"):
        self.client = binance_client
        self.symbol = symbol
        self.timeframe = timeframe
        
        # Stockage des donn√©es
        self.candles_df = pd.DataFrame()
        self.current_candle = {}
        self.indicators = {}
        
        # WebSocket
        self.ws = None
        self.ws_running = False
        self.reconnect_attempts = 0
        self.max_reconnects = 5
        
        # Callbacks
        self.on_candle_closed_callbacks = []
        self.on_price_update_callbacks = []
        
        # Threading
        self.data_lock = threading.Lock()
        self.update_queue = Queue()
        
        # Derni√®re mise √† jour
        self.last_update = None
        self.heartbeat_interval = 30  # secondes
        
    def add_candle_closed_callback(self, callback: Callable):
        """Ajoute un callback appel√© √† chaque fermeture de bougie"""
        self.on_candle_closed_callbacks.append(callback)
    
    def add_price_update_callback(self, callback: Callable):
        """Ajoute un callback appel√© √† chaque mise √† jour de prix"""
        self.on_price_update_callbacks.append(callback)
    
    def initialize_data(self, lookback_candles: int = 200):
        """Initialise les donn√©es historiques avec timeout r√©duit"""
        try:
            logger.info(f"üìä Initialisation des donn√©es {self.symbol} {self.timeframe}...")
            
            # R√©cup√©ration des donn√©es historiques avec timeout r√©duit
            logger.debug("Appel API get_klines...")
            klines, error = self.client.get_klines(
                symbol=self.symbol,
                interval=self.timeframe,
                limit=lookback_candles  # R√©duit de 500 √† 200 pour √™tre plus rapide
            )
            
            if error:
                logger.error(f"‚ùå Erreur r√©cup√©ration donn√©es: {error}")
                return False
            
            logger.debug(f"‚úÖ {len(klines)} klines re√ßues")
            
            # Conversion en DataFrame
            logger.debug("Conversion en DataFrame...")
            df_data = []
            for i, kline in enumerate(klines):
                if i % 50 == 0:  # Log de progression
                    logger.debug(f"Traitement kline {i}/{len(klines)}")
                
                df_data.append({
                    'timestamp': pd.to_datetime(kline[0], unit='ms'),
                    'open': float(kline[1]),
                    'high': float(kline[2]),
                    'low': float(kline[3]),
                    'close': float(kline[4]),
                    'volume': float(kline[5])
                })
            
            logger.debug("Cr√©ation DataFrame...")
            with self.data_lock:
                self.candles_df = pd.DataFrame(df_data)
                self.candles_df.set_index('timestamp', inplace=True)
                logger.debug("Calcul des indicateurs...")
                self.calculate_indicators()
            
            logger.info(f"‚úÖ {len(self.candles_df)} bougies historiques charg√©es")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation donn√©es: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return False
    
    def calculate_indicators(self):
        """Calcule tous les indicateurs techniques - Version SANS THREADING"""
        if len(self.candles_df) < 50:
            logger.debug("Pas assez de donn√©es pour les indicateurs")
            return
        
        try:
            logger.debug("Import des fonctions d'indicateurs...")
            
            # Ajout du chemin vers le dossier backtest
            import sys
            from pathlib import Path
            backtest_path = Path(__file__).parent.parent / "backtest"
            if str(backtest_path) not in sys.path:
                sys.path.insert(0, str(backtest_path))
            
            # Import simple
            from indicators import (
                calculate_rsi, compute_heikin_ashi, 
                compute_trend_indicators, calculate_mtf_rsi
            )
            logger.debug("‚úÖ Import indicators OK")
            
            # Copie des donn√©es
            logger.debug("Copie des donn√©es...")
            df_copy = self.candles_df.copy()
            logger.debug(f"Donn√©es copi√©es: {len(df_copy)} lignes")
            
            # Calculs step by step
            logger.debug("Calcul trend indicators...")
            df_copy = compute_trend_indicators(df_copy, ema_period=200, slope_lookback=5)
            logger.debug(f"‚úÖ EMA calcul√©e: {df_copy['EMA'].iloc[-1]:.2f}")
            
            logger.debug("Calcul Heikin Ashi...")
            df_copy = compute_heikin_ashi(df_copy)
            logger.debug(f"‚úÖ HA calcul√©: {df_copy['HA_close'].iloc[-1]:.2f}")
            
            logger.debug("Calcul RSI multiples...")
            df_copy['RSI_5'] = calculate_rsi(df_copy['HA_close'], 5).round(2)
            df_copy['RSI_14'] = calculate_rsi(df_copy['HA_close'], 14).round(2)
            df_copy['RSI_21'] = calculate_rsi(df_copy['HA_close'], 21).round(2)
            logger.debug(f"‚úÖ RSI calcul√©s: {df_copy['RSI_14'].iloc[-1]:.1f}")
            
            logger.debug("Calcul RSI MTF...")
            df_copy['RSI_mtf'] = calculate_mtf_rsi(df_copy['HA_close'], 14).round(2)
            logger.debug(f"‚úÖ RSI MTF: {df_copy['RSI_mtf'].iloc[-1]:.1f}")
            
            # Pr√©paration des indicateurs
            logger.debug("Pr√©paration des indicateurs...")
            new_indicators = {
                'RSI_5': float(df_copy['RSI_5'].iloc[-1]),
                'RSI_14': float(df_copy['RSI_14'].iloc[-1]),
                'RSI_21': float(df_copy['RSI_21'].iloc[-1]),
                'RSI_mtf': float(df_copy['RSI_mtf'].iloc[-1]),
                'HA_close': float(df_copy['HA_close'].iloc[-1]),
                'HA_open': float(df_copy['HA_open'].iloc[-1]),
                'HA_high': float(df_copy['HA_high'].iloc[-1]),
                'HA_low': float(df_copy['HA_low'].iloc[-1]),
                'EMA': float(df_copy['EMA'].iloc[-1]),
                'EMA_slope': float(df_copy['EMA_slope'].iloc[-1]),
                'close': float(df_copy['close'].iloc[-1]),
            }
            logger.debug("‚úÖ Indicateurs pr√©par√©s")
            
            # Mise √† jour DIRECTE (sans lock pour √©viter deadlock)
            logger.debug("Mise √† jour directe...")
            self.candles_df = df_copy
            self.indicators = new_indicators
            logger.debug("‚úÖ Mise √† jour directe termin√©e")
            
            logger.debug("‚úÖ Indicateurs calcul√©s avec succ√®s")
            logger.info(f"üìä Indicateurs mis √† jour - RSI14: {self.indicators['RSI_14']:.1f}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur calcul indicateurs: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            
            # Fallback simple
            self._set_default_indicators()
    
    def _set_default_indicators(self):
        """D√©finit des indicateurs par d√©faut en cas d'erreur"""
        logger.warning("üîÑ Utilisation d'indicateurs par d√©faut")
        try:
            if len(self.candles_df) > 0:
                last_close = float(self.candles_df['close'].iloc[-1])
            else:
                last_close = 40000.0  # Valeur par d√©faut
            
            default_indicators = {
                'RSI_5': 50.0,
                'RSI_14': 50.0,
                'RSI_21': 50.0,
                'RSI_mtf': 50.0,
                'HA_close': last_close,
                'HA_open': last_close,
                'HA_high': last_close,
                'HA_low': last_close,
                'EMA': last_close,
                'EMA_slope': 0.0,
                'close': last_close,
            }
            
            # Mise √† jour directe
            self.indicators = default_indicators
            logger.info("‚úÖ Indicateurs par d√©faut d√©finis")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur fallback: {e}")
            self.indicators = {k: 0.0 for k in ['RSI_5', 'RSI_14', 'RSI_21', 'RSI_mtf', 
                                               'HA_close', 'HA_open', 'HA_high', 'HA_low', 
                                               'EMA', 'EMA_slope', 'close']}
    
    def start_websocket(self):
        """D√©marre le WebSocket pour les donn√©es temps r√©el"""
        if self.ws_running:
            return
        
        try:
            # URL WebSocket Binance
            base_url = "wss://fstream.binance.com" if not self.client.testnet else "wss://testnet.binancefuture.com"
            stream_name = f"{self.symbol.lower()}@kline_{self.timeframe}"
            ws_url = f"{base_url}/ws/{stream_name}"
            
            logger.info(f"üîå Connexion WebSocket: {ws_url}")
            
            self.ws = websocket.WebSocketApp(
                ws_url,
                on_open=self._on_ws_open,
                on_message=self._on_ws_message,
                on_error=self._on_ws_error,
                on_close=self._on_ws_close
            )
            
            # D√©marrage dans un thread s√©par√©
            self.ws_thread = threading.Thread(target=self.ws.run_forever)
            self.ws_thread.daemon = True
            self.ws_thread.start()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage WebSocket: {e}")
            return False
    
    def _on_ws_open(self, ws):
        """Callback ouverture WebSocket"""
        logger.info("‚úÖ WebSocket connect√©")
        self.ws_running = True
        self.reconnect_attempts = 0
    
    def _on_ws_message(self, ws, message):
        """Callback r√©ception message WebSocket"""
        try:
            data = json.loads(message)
            kline_data = data.get('k', {})
            
            if not kline_data:
                return
            
            # Mise √† jour bougie courante
            self.current_candle = {
                'timestamp': pd.to_datetime(kline_data['t'], unit='ms'),
                'open': float(kline_data['o']),
                'high': float(kline_data['h']),
                'low': float(kline_data['l']),
                'close': float(kline_data['c']),
                'volume': float(kline_data['v']),
                'is_closed': kline_data['x']  # True si bougie ferm√©e
            }
            
            self.last_update = datetime.now()
            
            # Callback mise √† jour prix
            for callback in self.on_price_update_callbacks:
                try:
                    callback(self.current_candle)
                except Exception as e:
                    logger.error(f"‚ùå Erreur callback price update: {e}")
            
            # Si bougie ferm√©e, mise √† jour des donn√©es
            if self.current_candle['is_closed']:
                self._process_closed_candle()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement message WebSocket: {e}")
    
    def _process_closed_candle(self):
        """Traite une bougie ferm√©e - SANS LOCK"""
        try:
            new_candle = pd.DataFrame([{
                'timestamp': self.current_candle['timestamp'],
                'open': self.current_candle['open'],
                'high': self.current_candle['high'],
                'low': self.current_candle['low'],
                'close': self.current_candle['close'],
                'volume': self.current_candle['volume']
            }])
            new_candle.set_index('timestamp', inplace=True)
            
            # Ajout de la nouvelle bougie SANS LOCK
            self.candles_df = pd.concat([self.candles_df, new_candle])
            
            # Limitation de l'historique (garde 1000 bougies max)
            if len(self.candles_df) > 1000:
                self.candles_df = self.candles_df.tail(1000)
            
            # Recalcul des indicateurs
            self.calculate_indicators()
            
            logger.info(f"üìä Nouvelle bougie: {self.current_candle['close']:.1f} USDT")
            
            # Callbacks fermeture bougie
            for callback in self.on_candle_closed_callbacks:
                try:
                    callback(self.get_latest_data())
                except Exception as e:
                    logger.error(f"‚ùå Erreur callback candle closed: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement bougie ferm√©e: {e}")
    
    def _on_ws_error(self, ws, error):
        """Callback erreur WebSocket"""
        logger.error(f"‚ùå Erreur WebSocket: {error}")
    
    def _on_ws_close(self, ws, close_status_code, close_msg):
        """Callback fermeture WebSocket"""
        logger.warning(f"‚ö†Ô∏è WebSocket ferm√©: {close_status_code} - {close_msg}")
        self.ws_running = False
        
        # Tentative de reconnexion
        if self.reconnect_attempts < self.max_reconnects:
            self.reconnect_attempts += 1
            logger.info(f"üîÑ Tentative de reconnexion {self.reconnect_attempts}/{self.max_reconnects}")
            time.sleep(5)
            self.start_websocket()
        else:
            logger.error("‚ùå Max tentatives de reconnexion atteint")
    
    def stop_websocket(self):
        """Arr√™te le WebSocket"""
        if self.ws:
            self.ws_running = False
            self.ws.close()
            logger.info("üîå WebSocket ferm√©")
    
    def get_latest_data(self) -> Optional[Dict]:
        """R√©cup√®re les derni√®res donn√©es avec indicateurs - SANS LOCK"""
        if len(self.candles_df) == 0:
            return None
        
        try:
            latest_row = self.candles_df.iloc[-1]
            
            return {
                'timestamp': latest_row.name,
                'open': latest_row['open'],
                'high': latest_row['high'],
                'low': latest_row['low'],
                'close': latest_row['close'],
                'volume': latest_row['volume'],
                'indicators': self.indicators.copy() if self.indicators else {},
                'current_price': self.current_candle.get('close', latest_row['close'])
            }
        except Exception as e:
            logger.error(f"‚ùå Erreur get_latest_data: {e}")
            return None
    
    def get_connection_status(self) -> Dict:
        """V√©rifie le statut de la connexion donn√©es"""
        return {
            'websocket_connected': self.ws_running,
            'last_update': self.last_update,
            'reconnect_attempts': self.reconnect_attempts,
            'data_points': len(self.candles_df),
            'current_price': self.current_candle.get('close', 0),
            'indicators_ready': len(self.indicators) > 0
        }
    
    def is_healthy(self) -> bool:
        """V√©rifie si la connexion est saine"""
        if not self.ws_running:
            return False
        
        if self.last_update is None:
            return False
        
        # V√©rification du heartbeat
        time_since_update = (datetime.now() - self.last_update).total_seconds()
        if time_since_update > self.heartbeat_interval:
            logger.warning(f"‚ö†Ô∏è Pas de mise √† jour depuis {time_since_update}s")
            return False
        
        return True